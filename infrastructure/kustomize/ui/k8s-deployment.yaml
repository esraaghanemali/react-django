apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
  labels:
    app: ${SERVICE_NAME}
    service: "${NAMESPACE}.${SERVICE_NAME}"
    version: ${NAMESPACE}
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
        service: "${NAMESPACE}.${SERVICE_NAME}"
        version: ${IMAGE_TAG}
        service.istio.io/canonical-name: "${NAMESPACE}.${SERVICE_NAME}"
        sidecar.istio.io/inject: "true"
      annotations:
        sidecar.istio.io/agentLogLevel: "default:error,xdsproxy:error,ads:error,cache:error,sds:error"
        sidecar.istio.io/componentLogLevel: "misc:error"
        sidecar.istio.io/logLevel: "error"
    spec:
      containers:
        - name: ${SERVICE_NAME}
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 50m
              memory: 128Mi
          envFrom:
            - configMapRef:
                name: ${SERVICE_NAME}
          env:
            - name: SERVICE_NAME
              value: ${SERVICE_NAME}
            - name: NAMESPACE
              value: ${NAMESPACE}
          ports:
            - name: http
              containerPort: 8080
          # This configuration needed when deplpying the backend
          #   - name: health
          #     containerPort: 8081
          # livenessProbe:
          #   httpGet:
          #     path: /live
          #     port: 8081
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          # readinessProbe:
          #   httpGet:
          #     path: /ready
          #     port: 8081
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          # startupProbe:
          #   httpGet:
          #     path: /startup
          #     port: 8081
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          #   failureThreshold: 60
          image: ${IMAGE_URI}:${IMAGE_TAG}
          imagePullPolicy: IfNotPresent
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: ${SERVICE_NAME}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
